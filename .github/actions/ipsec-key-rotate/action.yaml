name: IPsec key rotation test
description: Rotates keys and checks that established connections are not interrupted
inputs:
  key-algo:
    required: true
    description: "cli --auth-algo param value"
  key-type-two:
    required: true
    description: "'+' to rotate to the per-tunnel key system"
  extra-connectivity-test-flags:
    required: false
    description: "connectivity test extra parameters"
runs:
  using: composite
  steps:
    - name: Rotate IPsec Key & Test
      uses: ./.github/actions/conn-disrupt-test
      with:
        job-name: conformance-ipsec-e2e-key-rotation
        extra-connectivity-test-flags: ${{ inputs.extra-connectivity-test-flags }}
        operation-cmd: |
          current_key=$(./cilium-cli encryption key-status)
          echo "Rotating IPsec key (current $current_key)"
          key_per_node=$([ "${{ inputs.key-type-two }}" == "+" ] && echo "true" || echo "false")
          ./cilium-cli encryption rotate-key --auth-algo=${{ inputs.key-algo }} --key-per-node=$key_per_node

          new_key=$(./cilium-cli encryption key-status)
          echo "New $new_key"

          # Wait until key rotation starts
          # We expect the amount of keys in use to grow during rotation.
          while true; do
            status=$(./cilium-cli encryption status)
            in_progress=$(echo "$status" | grep -c "IPsec key rotation in progress: true" || true)
            if [[ "$in_progress" -eq "1" ]]; then
              break
            fi
            keys_in_use=$(echo "$status" | grep "IPsec keys in use:")
            exp_nb_keys=$(echo "$status" | grep "IPsec expected key count:")
            echo "Waiting until key rotation starts ($keys_in_use keys, $exp_nb_keys)"
            sleep 30s
          done

          # Wait until key rotation completes
          # By default the key rotation cleanup delay is 5min, let's sleep 4min before actively polling
          sleep $((4*60))
          while true; do
            status=$(./cilium-cli encryption status)
            in_progress=$(echo "$status" | grep -c "IPsec key rotation in progress: false" || true)
            if [[ "$in_progress" -eq "1" ]]; then
              break
            fi
            keys_in_use=$(echo "$status" | grep "IPsec keys in use:")
            exp_nb_keys=$(echo "$status" | grep "IPsec expected key count:")
            echo "Waiting until key rotation completes ($keys_in_use keys, $exp_nb_keys)"
            sleep 30s
          done
